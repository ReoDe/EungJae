#include<iostream>
using namespace std;


void merge_sort(int arr[], int left, int right);
void merge(int arr[], int left, int mid, int right);

int N;

int main()
{
   cin >> N;

   int * arr = new int[N];
   for (int i = 0; i < N; i++)
   {
      cin >> arr[i];
   }

   /*

   // 버블정렬
   {
      int temp = 0;

      for (int i = 0; i < N; i++)
      {
         for (int j = 0; j < N - 1 - i; j++)
         {
            if (arr[j] > arr[j + 1]) // 뒷 수가 크면
            {
               //temp = arr[j];
               //arr[j] = arr[j + 1];
               //arr[j + 1] = temp;
               swap(arr[i], arr[j + 1]);
            }
         }
      }



      for (int i = 0; i<N; i++)
      {
      printf("%d\n", arr[i]);
      }

   }
   */
   
   /*
   // 삽입정렬
   {
      int temp = 0;

      for (int i = 0; i < N; i++)
      {
         for (int j = 0; j < i; j++)
         {

            if (arr[i] < arr[j]) // 선택된 수가 j보다 작으면
            {
               swap(arr[i], arr[j]);
            }
            else break;
         }
      }




      for (int i = 0; i<N; i++)
      {
      printf("%d\n", arr[i]);
      }

   }
   */

   /*
   
   // 선택정렬
   {
      int temp = 0;

      for (int i = 0; i < N - 1; i++)
      {

         for (int j = i + 1; j < N; j++)
         {
            if (arr[i] > arr[j])
               swap(arr[i], arr[j]);
         }


      }

      for (int i = 0; i<N; i++)
      {
         printf("%d\n", arr[i]);
      }

   }

   */

   // 합병정렬
   {

      merge_sort(arr, 0, N - 1); // 나누는 과정

      for (int i = 0; i<N; i++)
      {
         printf("%d\n", arr[i]);
      }


   }


   delete[]arr;

   system("pause");

   return 0;
}

void merge_sort(int arr[], int left, int right)
{
   int mid;

   if (left < right)
   {
      mid = (left + right) / 2;

      merge_sort(arr, left, mid);
      merge_sort(arr, mid + 1, right);

      merge(arr, left, mid, right);
   }

}

void merge(int arr[], int left, int mid, int right)
{
   int i = left;
   int j = mid + 1;
   int k = left;
   int l;


   int * sorted = new int[N];

   while (i <= mid && j <= right) // 분할정렬된 리스트 합병
   {
      if (arr[i] <= arr[j]) // 만약 왼쪽이 오른쪽보다 작다면
         sorted[k++] = arr[i++]; // 왼쪽것을 먼저 리스트에 작성, 그리고 i와 j,k 를 1씩 올림
      else
         sorted[k++] = arr[j++];

   }
   // 여기까지 새로운 리스트로 만들었음.




   // 남아 있는 값들을 일괄 복사
   if (i>mid) 
   {
      for (l = j; l <= right; l++)
         sorted[k++] = arr[l];
   }
   // 남아 있는 값들을 일괄 복사
   else 
   {
      for (l = i; l <= mid; l++)
         sorted[k++] = arr[l];
   }



   for (l = left; l <= right; l++) 
   {
      arr[l] = sorted[l];
   }



   delete[]sorted;
}
