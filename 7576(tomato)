#include <iostream>
#include <queue>
using namespace std;


int x, y;
int tomato, un_tomato, not_tomato;
int Day;
int ** arr;

struct bfs_struct
{
	int x;
	int y;
	int Depth;
};

queue<bfs_struct*> queueTomato;



void bfs()
{

	for (int i = 0; i < x; i++)
	{
		for (int j = 0; j < y; j++)
		{
			// 처음에 익었는 토마토를 집어넣는다.
			if (arr[i][j] == 1)
			{
				bfs_struct* isTomato = new bfs_struct();
				isTomato->x = i; // x좌표
				isTomato->y = j; // y좌표
				isTomato->Depth = 0;
				queueTomato.push(isTomato);
			}
		}
	}

	


	while (queueTomato.size())
	{
		bfs_struct* nowTomato = queueTomato.front();
		queueTomato.pop();

		// 상하좌우 탐색

		//상, 1줄 -1이 -1나오면 최상단이란것, 
		if (nowTomato->x - 1 >= 0 && arr[nowTomato->x - 1][nowTomato->y] == 0)
		{
			arr[nowTomato->x - 1][nowTomato->y] = 1;
			
			// 새로 생성됨
			bfs_struct* isTomato = new bfs_struct();
			isTomato->x = nowTomato->x - 1;
			isTomato->y = nowTomato->y;
			isTomato->Depth = nowTomato->Depth + 1;
			queueTomato.push(isTomato);

			// 최고높이 변경
			if (isTomato->Depth > Day)
			{
				Day = isTomato->Depth;
				//cout << "상";
			}

			// 토마토 총 상태 변경
			tomato++;
			un_tomato--;
		}


		//하 
		if (nowTomato->x + 1 < x && arr[nowTomato->x + 1][nowTomato->y] == 0)
		{
			arr[nowTomato->x + 1][nowTomato->y] = 1;

			// 새로 생성됨
			bfs_struct* isTomato = new bfs_struct();
			isTomato->x = nowTomato->x + 1;
			isTomato->y = nowTomato->y;
			isTomato->Depth = nowTomato->Depth + 1;
			queueTomato.push(isTomato);

			// 최고높이 변경
			if (isTomato->Depth > Day)
			{
				Day = isTomato->Depth;
				//cout << "하";
			}

			// 토마토 총 상태 변경
			tomato++;
			un_tomato--;
		}

		// 좌
		if (nowTomato->y - 1 >= 0 && arr[nowTomato->x][nowTomato->y - 1] == 0)
		{
			arr[nowTomato->x][nowTomato->y - 1] = 1;

			// 새로 생성됨
			bfs_struct* isTomato = new bfs_struct();
			isTomato->x = nowTomato->x;
			isTomato->y = nowTomato->y - 1;
			isTomato->Depth = nowTomato->Depth + 1;
			queueTomato.push(isTomato);

			// 최고높이 변경
			if (isTomato->Depth > Day)
			{
				Day = isTomato->Depth;
				//cout << "좌";
			}

			// 토마토 총 상태 변경
			tomato++;
			un_tomato--;
		}

		// 우
		if (nowTomato->y + 1 < y && arr[nowTomato->x][nowTomato->y + 1] == 0)
		{
			arr[nowTomato->x][nowTomato->y + 1] = 1;

			// 새로 생성됨
			bfs_struct* isTomato = new bfs_struct();
			isTomato->x = nowTomato->x;
			isTomato->y = nowTomato->y + 1;
			isTomato->Depth = nowTomato->Depth + 1;
			queueTomato.push(isTomato);

			// 최고높이 변경
			if (isTomato->Depth > Day)
			{
				Day = isTomato->Depth;
				//cout << "우";
			}

			// 토마토 총 상태 변경
			tomato++;
			un_tomato--;
		}
		


	}
}

int main() 
{
	// 초기화
	tomato = 0;
	un_tomato = 0;
	not_tomato = 0;
	Day = 0;

	// 세로, 가로
	cin >> y >> x;

	arr = (int**)malloc(sizeof(int*)*x);

	// 토마토 정보 받아오기
	for (int i = 0; i < x; i++) {
		arr[i] = (int*)malloc(sizeof(int)*y);
		for (int j = 0; j < y; j++) {
			cin >> arr[i][j];
		}
	}



	for (int i = 0; i < x; i++)
	{
		for (int j = 0; j < y; j++)
		{
			//cin >> arr[x][y];
			// 토마토 초기화
			if (arr[i][j] == 1) tomato++;
			else if (arr[i][j] == -1) not_tomato++;
			else if (arr[i][j] == 0) un_tomato++;

		}
	}



	// Breadth-First Search


	// 모든 토마토가 익어있는 상태
	if (tomato == x * y)
		cout << 0;

	// 토마토가 익지 못하는 상태 (모든 토마토가 -1 일때)
	if (not_tomato == x * y)
		cout << -1;

	bfs();

	// 토마토가 고립되어서 익지 못하는 상태
	if (un_tomato > 0)
		cout << -1;
	else 	// 그외 시간을 찾자
		cout << Day;






}
