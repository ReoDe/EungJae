#include<iostream>
#include<queue>
using namespace std;

struct structQueue
{
	int PriorityNum; // 우선순위 넘버
	int KeyValue; // 초기 배열순서

};

int main()
{
	int T;
	cin >> T;

	for (int i = 0; i < T; i++)
	{

		//cout << "시작" << endl;

		int N; // 전체 수
		cin >> N;  // 1

		int KeyValue; // 초기 배열순서
		cin >> KeyValue;  // 0

		queue<structQueue> printqueue;
		queue<int> Number;
		int* Earr = new int[N];


		for (int i = 0; i < N; i++)
		{
			int key;
			cin >> key;

			structQueue _queue;

			_queue.PriorityNum = key;
			_queue.KeyValue = i;

			printqueue.push(_queue);
			
			Earr[i] = key;
		}

		

		// 선택정렬 (오름차순)
		{
			int temp = 0;

			for (int i = 0; i < N - 1; i++)
			{

				for (int j = i + 1; j < N; j++)
				{
					if (Earr[i] < Earr[j])
						swap(Earr[i], Earr[j]);
				}


			}
			
		}

		for (int i = 0; i < N; i++)
		{
			Number.push(Earr[i]);
		}

		int answer = 1;
	
		while (printqueue.size() > 0)
		{
			if (Number.front() == printqueue.front().PriorityNum) // 만약에 우선순위가 가장 높다면
			{
				if (KeyValue == printqueue.front().KeyValue) // 그중에서 원하는 값이랑 같다면
				{
					//cout << "결과값";
					cout << answer << endl;
					break; // 끝
				}
				else
				{
					printqueue.pop(); // 프린트하고
					Number.pop(); // 맨 앞 숫자도 바꾸고

					answer++; // 순서 up
					

				}
			}
			else // 우선순위가 가장 높지 않다면
			{
				structQueue temp;
				temp = printqueue.front(); // 앞에서 빼서

				printqueue.pop();
				printqueue.push(temp); // 뒤로

				
			}
		}
		
		
		

		delete[]Earr;

	}

	


	//system("pause");



	return 0;
}
